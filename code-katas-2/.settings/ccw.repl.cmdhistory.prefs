cmdhistory=["(concat [1 2 3] [4 5 6])" "(interpose [1 2 3] [3 4 5])" "(intersection [1 2 3] [4 5 6])" "(intersection \#{1} \#{1 2 3})" " (filter (set [1 2 3 3 3]) [3 4 3 5])" "(filter (set [1 2 3 4 5]) [1 2 3 4])" "(filter (filter (set [1 2 3]) [4 1 3 2]) [0 9 1 8 2 3])" "(filter (set (filter (set [1 2 3]) [4 1 3 2])) [0 9 1 8 2 3])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] [1 18192 12983] [0.5 3/2 7 19])" "(search [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(take 1 [12 3])" "(reduce + [1 2 3 4])" "(+ 1)" "(fn [a b] (filter (set a) b) [1 2 3 4])" "(search [1 2 3 4] [2 4 6])" "(clojure.set/intersection [1 2 3 4 5] [2 3 7 8 9])" "(lazy-seq clojure.set/intersection [1 2 3 4 5] [2 3 5 7 8])" "(lazy-seq clojure.set/intersection [2 3 5 7 8] [1 2 3 4 5])" "(lazy-seq clojure.set/intersection [2 3 5 7 8] [1 2 3 4 5] [1 2 3 4 5 6 7 8 9])" "(lazy-seq clojure.set/difference [2 3 5 7 8] [1 2 3 4 5] [1 2 3 4 5 6 7 8 9])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(clojure.set/intersection [1 2 3 4 5])" "(lazy-seq (clojure.set/intersection [1 2 3 4 5]))" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(reduce clojure.set/intersection [[1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19]])" "(lazy-seq (reduce clojure.set/intersection [[1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19]]))" "(reduce clojure.set/intersection '([1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19]))" "(search [1 2 3] [3 4 5])" "(rest [[1 2 3]])" "(first(rest [[1 2 3]]))" "(search [1 2 3 4] [2 8 9 0])" "(search [2 8 9 0] [1 2 3 4])" "(clojure.set/intersection [1 2 3 4] [2 3 4 5] [2 3 0 9] [45 21 2] [121 432 5])" "(reduce [1 2 3] [2 3 4 5])" "(filter [1 2 3] [2 3 4 5])" "(filter 1 [2 1 23])" "(search [1 2 3] [2 3 4 5])" "(filter (set [1 2 3]) [3 4 5])" "(filter (set [1 2 3]) '(3 4 5))" "(search [1 2 4] [2 3 4] [23 4 21])" "(search [1 2 3] [2 3 45])" "(rest [[1 2 3] [2 3 45]])" "(search [1 2 3] [23 4 5])" "(set [1 2 3])" "(filter (set [1 2 3]) (set [2 3 4]))" "(search [1 2 3] [2 3 4])" "(empty? (rest [[1 2 3]]))" "(not (empty? (rest [[1 2 3]])))" "(search [1 2 3])" "(fn [a b] (+ a b) 3 4)" "((fn [a b] (+ a b)) 3 4)" "(search [1 2 3] [2 3 4])" "(search [1 2 3] [2 3 4] [2 23])" "(clojure.set/intersection (set [[12 3 4] [2 3 4] [221 22 3] [21 3 4]]))" "(clojure.set/intersection [[12 3 4] [2 3 4] [221 22 3] [21 3 4]])" "(clojure.set/intersection '([12 3 4] [2 3 4] [221 22 3] [21 3 4]))" "(\#(set (filter %1 %2)) [1 2 3] [2 3 4])" "((\#(set (filter %1 %2))) [1 2 3] [2 3 4])" "((fn [a b] (set (filter a b))) [1 2 3] [4 5 6])" "\#(set (filter %1 %2))" "(\#(set (filter %1 %2)) [1 2 3] [2 3 4])" "(fn [a b] \#(set (filter a b)))" "((fn [a b] \#(set (filter a b))) [1 2 3] [4 5 6])" "(defn interseccion [a b] \#(set (filter a b)))" "(interseccion [1 2 3] [2 5 6])" "\#(set (filter %1 %2))" "\#(set (filter [1 2 3] [2 3 4]))" "\#(set (filter \#{1 2 3} \#{2 3 4}))" "(filter \#{1 2 3} \#{2 3 4})" "(search [1 2 3] [3 4 5])" "((fn [a] [c d] a (+ c d)) 3)" "((fn ([a] a) ([a b] (+ a b))))" "((fn ([a] a) ([a b] (+ a b))) 3)" "((fn ([a] a) ([a b] (+ a b))) 3 3)" "(search [1 2 3] [3 2 4])" "(search [1 2 3 4] [4 5 6] [4 12 12])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(take 1 [1 2 3])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search (range) (range 0 100 7/6) [10 23 31 42 72 182])" "asd" "(search (range) (range 0 100 7/6) [10 23 31 42 72 182])" "(range)" "(first (range))" "(filter (set (range)) (set [10 23]))" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(lazy-seq (set (range)))" "(first (lazy-seq (set (range))))" "(first (set (lazy-seq (range))))" "(first (lazy-seq (set (lazy-seq (range)))))" "(first (lazy-seq (range)))" "(first (filter (set (range)) (set [88 76])))" "(clojure.set/intersection [1 2 3 4] [2 3 45])" "(first \#(range))" "(first (set (range)))" "(filter (set [1 2 3]) (range))" "(filter (set [1 2 3]) (lazy-seq (range)))" "(first (lazy-seq (range)))" "(clojure.set/intersection (set [1 2 3 4]) (range))" "(set [1 2 3 45 12])" "(lazy-seq (first (set (range))))" "(search [2 9 40 90])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [2 9 40 90])" "(search (range) (range 0 100 7/6) [10 23 31 42 72 182])" "(first (filter (lazy-seq (set (range))) (lazy-seq (set [6 8 9 10]))))" "(first (lazy-seq (filter (set (range)) (set [6 8 9 10]))))" "(first (filter (set (lazy-seq (range))) (set (lazy-seq [6 8 9 10]))))" "(first (lazy-seq (filter (set (range)) (set [1 2 3 45]))))" "(first (lazy-seq (set (range))))" "(search (range) (range 0 100 7/6) [10 23 31 42 72 182])" "(search [1 2 3 4 5] [2 3 1 23 ] [901 182 1] [129 828 9 1 2 3])" "(search [1 2 3 4 5] [2 3 1 23 ] [901 182 1 2] [129 828 9 1 2 3])" "(search [1 2 3 4 5] [2 3 1 23] [901 182 2] [129 828 9 2 3])" "(search [1 2 3 4 5] [2 3 1 23 ] [901 182 1 2] [129 828 9 1 2 3])" "(search [1 2 3] '(1 8 3))" "(search [1 9 19] (range))" "(\= ((fn [a b](filter a b)) \#{0 1 2 3} \#{2 3 4 5}) \#{2 3})" "((fn [a b] (filter a b)) \#{1 0 2 3} \#{2 3 4 5})" "((fn [a b] (set (filter a b))) \#{1 0 2 3} \#{2 3 4 5})" "(clojure.set/intersection (set [1 2 3]) (set (range)))" "(first (range))" "(concat (set [1 2 3]) [])" "(set [1 2 3])" "(first (concat (filter (set [1 2 3]) (set (range)))))" "(first (concat (filter (set [1 2 3]) (set (range)))) [])" "(concat [1 2 3])" "(lazy-seq [1 2 3])" "(distinct (mapcat get-origlabels (range *song-count*)))" "(filter \#{1 2 3} [1 23 45])" "(filter \#{1 2 3} \#{2 332 1})" "(first (filter \#{1 2 3} (set (range))))" "(dorun (first (filter \#{1 2 3} (set (range)))))" "(first (filter \#{1 2 3} (range)))" "(first (filter (range) [1 2 3]))" "(first (filter (set (range)) [1 2 3]))" "(*print-length* (range))" "(*print-length* [1 2 3])" "(alength [1 2 3])" "(first (sort ['(range) [1 2 3 4] [2 3 4]]))" "(sort ['(range) [1 2 3 4] [2 3 4]])" "(sort [(range) [1 2 3 4] [2 3 4]])" "(sort [[1 2 3 4] [2 3 4]])" "(search (range) (range 0 100 7/6) [10 23 31 42 72 182])" "(seq? [1 2])" "(seq? '(1 2))" "(seq? (range))" "(range)" "(take 1 (range))" "(search (range) (range 0 100 7/6) [10 23 31 42 72 182])" "(seq? (range 1 2))" "(ifn? (range 1 2))" "(ifn? (range))" "(remove (range) [[1 2 3] (range) [2 3 4]])" "(remove '(range) [[1 2 3] (range) [2 3 4]])" "(count (range 1 2))" "(range 1 2)" "(count (range))" "(search [10 23 31 42 72 182] (range) (range 0 100 7/6))" "(search [10 23 31 42 72 182] '(range) '(range 0 100 7/6))" "(search [10 23 31 42 72 182] (range) (range 0 100 7/6))" "(search [10 23 31 42 72 182] (range))" "(search [2 9 40 90])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [10 23 31 42 72 182] (range) (range 0 100 7/6))" "(search [10 23 31 42 52 182] (range))" "(search [10 23 31 42 52 182] (range) (range))" "(search [10 23 31 42 72 182] (range))" "(search [10 23 31 42 72 182] (range) (range))" "(search [2 9 40 90])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search (range) (range 0 100 7/6) [10 23 31 42 72 182])" "(search (map \#(* % % %) (range))\\r\\n                      (filter \#(zero? (bit-and % (dec %))) (range))\\r\\n                      (iterate inc 20))" "(clojure.set/intersection (set [1 2 3]) (range))" "(first (set (range)))" "(first (range))" "(search (range) (range 0 100 7/6) [10 23 31 42 72 182])" "(partial (fn[a b] (+ a b)) 2)" "((partial (fn[a b] (+ a b)) 2) 3)" "(unpartial (fn [a] (fn [b] (fn [c] (fn [d] (+ a b c d))))))" "(unpartial (fn [a] (fn [b] (fn [c] (fn [d] (+ a b c d))))) 10 5 3 2)" "((unpartial (fn [a] (fn [b] (fn [c] (fn [d] (+ a b c d)))))) 10 5 3 2)" "(search [1 2 3 4] [2 3 4 5] [4 9 10 29])" "(search (range) [1 2 3 4])" "(search (range) (range 0 100 7/6) [10 23 31 42 72 182])" "((unpartial (fn [a](fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n                                   (* a b c d)))))) 15 2 1 1)" "((unpartial (fn [a]\\r\\n                           (fn [b]\\r\\n                             (/ a b)))) 10 2)" "((unpartial (fn [a]\\r\\n                            (fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n                                   (+ a b c d)))))) 10 5 3 2)" "((unpartial (fn [a]\\r\\n                            (fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n  \\n                                  (+ a b c d)))))) 10 5 3 2)" "(defmacro unpartial [x & body](fn [~x] ~@body))" "(intercalar < \:menor [2 6 9 4 3])" "(intercalar > \:mayor [8])" "(intercalar > \:mayor ())" "(take 12 (->> [0 1]\\r\\n                       (iterate (fn [[a b]] [b (+ a b)]))\\r\\n                       (map first)\\r\\n                       (k/intercalar (fn [a b]\\r\\n                                        (\= (mod a 2) (mod b 2)))\\r\\n                                      \:igual)))" "(intercalar < \:menor [2 6 9 4 3])" "(intercalar > \:mayor [8])" "(intercalar > \:mayor ())" "(empty? (intercalar > \:mayor ()))" "(intercalar (fn [a b] (\= (mod a 2) (mod b 2)))\:igual)" "(search [1 2 3 4] [2 3 4 5] [4 2 23 2 1] [12 312 4])" "(intercalar < \:menor [2 6 9 4 3])" "(intercalar > \:mayor [8])" "(intercalar > \:mayor ())" "(concat '(0 9) '(10 2))" "(into '(0 9) '(10 2))" "(intercalar < \:menor [2 6 9 4 3])" "(apply list 0 9)" "(list 0 9)" "(0 9)" "(cons 2 '(3 4))" "(conj 2 '(3 4))" "(intercalar < \:menor [2 6 9 4 3])" "(is (\= '(2 \:menor 6 \:menor 9 4 3) (k/intercalar < \:menor [2 6 9 4 3])))" "(intercalar > \:mayor [8])" "(intercalar < \:menor [2 6 9 4 3])" "(intercalar > \:mayor ())" "(intercalar (fn [a b]\\r\\n                                        (\= (mod a 2) (mod b 2))))" "(conj '(1 2 3) 4)" "(cons 1 [2 3 4])" "(take 3 (tartamudeo 1))" "(take 3 (iterate + 5))" "(take 3 (tartamudeo 1))" "(take 1 (tartamudeo 1))" "(concat 1 [2 3])" "(concat (list 1) [2 3])" "(take 1 (tartamudeo 1))" "(take 1 (tartamudeo [1]))" "(take 2 (tartamudeo [1]))" "(take 4 (iterate inc 2))" "(take 1 (tartamudeo [1]))" "(defn auxiliar [veces seq] \\r\\n    (when-let [[primero & resto] seq]  \\r\\n      (if (\= primero (first resto)) \\r\\n        (auxiliar (inc veces) resto) \\r\\n        (concat (list veces) (concat (list primero) (auxiliar 1 resto))))))" "(auxiliar [1])" "(auxiliar 1 [1])" "(auxiliar 1 [3 1])" "(auxiliar 1 [2 1])" "(auxiliar 1 1 1 4 4)" "(auxiliar 1 [1 1 1 4 4])" "(take 1 (iterate [1]))" "(take 1 (tartamudeo [1]))" "(take 2 (tartamudeo [1]))" "(take 1 (tartamudeo [1]))" "(take 2 (tartamudeo [1]))" "(vector 1)" "(concat (vector 1) '(2 3 4))" "(defn auxiliar [veces seq] \\r\\n    (when-let [[primero & resto] seq]  \\r\\n      (if (\= primero (first resto)) \\r\\n        (auxiliar (inc veces) resto) \\r\\n        (vector (concat (vector veces) (concat (vector primero) (auxiliar 1 resto)))))))" "(auxiliar 1 [1 2 3])" "(defn auxiliar [veces seq] \\r\\n    (when-let [[primero & resto] seq]  \\r\\n      (if (\= primero (first resto)) \\r\\n        (auxiliar (inc veces) resto) \\r\\n        (concat (list veces) (concat (list primero) (auxiliar 1 resto))))))" "(auxiliar 1 [1 2 3])" "(cons (list 1) (rest [1 2 3 4]))" "(defn auxiliar [veces seq] \\r\\n    (when-let [[primero & resto] seq]  \\r\\n      (if (\= primero (first resto)) \\r\\n        (auxiliar (inc veces) resto) \\r\\n        (apply vector (concat (list veces) (concat (list primero) (auxiliar 1 resto)))))))" "(auxiliar 1 [1 2 3])" "(take 1 (tartamudeo [1]))" "(take 2 (tartamudeo [1]))" "(take 5(iterate inc 5))" "(auxiliar 1 [1 2 3 4 6])" "(take 2 (tartamudeo [1]))" "(tartamudeo [2])" "(first (tartamudeo [1 1 1 4 4]))" "(nth (tartamudeo [1]) 6)" "(count (nth (tartamudeo [3 2]) 15))" "((unpartial (fn [a] (fn [b] (+ a b)))) 10 5)" "((unpartial (fn [a] (fn [b] (/ a b)))) 10 5)" "((unpartial (fn [a] (fn [b] (fn [c] (fn [d] (+ a b c d)))))) 10 20 30 40 50)" "((unpartial (fn [a] (fn [b] (fn [c] (fn [d] (+ a b c d)))))) 10 20 30 40)" "(map first [[0 1 2 3] [2 3 4] [21 1 2 3]])" "(set (map first [[0 1 2 3] [2 3 4] [21 1 2 3]]))" "(set (map first [[0 1 2 3] [0 2 3 4] [0 21 1 2 3]]))" "(count (set (map first [[0 1 2 3] [0 2 3 4] [0 21 1 2 3]])))" "(count (set (map first [[0 1 2 3] [2 3 4] [3 21 1 2 3]])))" "(sort [[1 2 3] [3 2 1] [2 3 5]])" "(map (fn [a] \\r\\n           (if (\= (first a) 1)\\r\\n                  (rest a)\\r\\n                  a))\\r\\n           [[6 2 3 4] [2 3 4 5] [1 2 3 4]])" "(search [1 2 3 4] [2 3 4 1])" "(search [[1 2 3 4] [4 3 2 1]])" "(search [1 2 3 4] [4 3 2 1])" "(apply inc [1 2 3 4])" "(apply + [1 2])" "(apply + (1 2))" "(search [1 2 3 4] [4 3 2 1])" "(search [1 2 3 4] [1 4 3 2 1])" "(search [1 2 3 4] [4 3 2 1])" "(search [2 3 4] [3 4 5])" "(search [2 9 40 90])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search (range) (range 0 100 7/6) [10 23 31 42 72 182])" "(search (map \#(* % % %) (range))\\r\\n                      (filter \#(zero? (bit-and % (dec %))) (range))\\r\\n                      (iterate inc 20))" "(nth (k/tartamudeo [1]) 6)" "(nth (tartamudeo [1]) 6)" "(take 3 (tartamudeo [1]))" "(\= [[1 1] [2 1] [1 2 1 1]] (take 3 (tartamudeo [1])))" "(search (map \#(* % % %) (range))\\r\\n                      (filter \#(zero? (bit-and % (dec %))) (range))\\r\\n                      (iterate inc 20))" "((unpartial (fn [a]\\r\\n                            (fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n                                   (+ a b c d)))))) 10 5 3 2)" "((unpartial (fn [a]\\r\\n                            (fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n                                   (* a b c d)))))) 15 2 1 1)" "((unpartial (fn [a]\\r\\n                           (fn [b]\\r\\n                             (/ a b)))) 10 2)"]
eclipse.preferences.version=1
