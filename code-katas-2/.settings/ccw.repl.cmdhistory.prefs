cmdhistory=["(concat [1 2 3] [4 5 6])" "(interpose [1 2 3] [3 4 5])" "(intersection [1 2 3] [4 5 6])" "(intersection \#{1} \#{1 2 3})" " (filter (set [1 2 3 3 3]) [3 4 3 5])" "(filter (set [1 2 3 4 5]) [1 2 3 4])" "(filter (filter (set [1 2 3]) [4 1 3 2]) [0 9 1 8 2 3])" "(filter (set (filter (set [1 2 3]) [4 1 3 2])) [0 9 1 8 2 3])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] [1 18192 12983] [0.5 3/2 7 19])" "(search [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(take 1 [12 3])" "(reduce + [1 2 3 4])" "(+ 1)" "(fn [a b] (filter (set a) b) [1 2 3 4])" "(search [1 2 3 4] [2 4 6])" "(clojure.set/intersection [1 2 3 4 5] [2 3 7 8 9])" "(lazy-seq clojure.set/intersection [1 2 3 4 5] [2 3 5 7 8])" "(lazy-seq clojure.set/intersection [2 3 5 7 8] [1 2 3 4 5])" "(lazy-seq clojure.set/intersection [2 3 5 7 8] [1 2 3 4 5] [1 2 3 4 5 6 7 8 9])" "(lazy-seq clojure.set/difference [2 3 5 7 8] [1 2 3 4 5] [1 2 3 4 5 6 7 8 9])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(clojure.set/intersection [1 2 3 4 5])" "(lazy-seq (clojure.set/intersection [1 2 3 4 5]))" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(reduce clojure.set/intersection [[1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19]])" "(lazy-seq (reduce clojure.set/intersection [[1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19]]))" "(reduce clojure.set/intersection '([1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19]))" "(search [1 2 3] [3 4 5])" "(rest [[1 2 3]])" "(first(rest [[1 2 3]]))" "(search [1 2 3 4] [2 8 9 0])" "(search [2 8 9 0] [1 2 3 4])" "(clojure.set/intersection [1 2 3 4] [2 3 4 5] [2 3 0 9] [45 21 2] [121 432 5])" "(reduce [1 2 3] [2 3 4 5])" "(filter [1 2 3] [2 3 4 5])" "(filter 1 [2 1 23])" "(search [1 2 3] [2 3 4 5])" "(filter (set [1 2 3]) [3 4 5])" "(filter (set [1 2 3]) '(3 4 5))" "(search [1 2 4] [2 3 4] [23 4 21])" "(search [1 2 3] [2 3 45])" "(rest [[1 2 3] [2 3 45]])" "(search [1 2 3] [23 4 5])" "(set [1 2 3])" "(filter (set [1 2 3]) (set [2 3 4]))" "(search [1 2 3] [2 3 4])" "(empty? (rest [[1 2 3]]))" "(not (empty? (rest [[1 2 3]])))" "(search [1 2 3])" "(fn [a b] (+ a b) 3 4)" "((fn [a b] (+ a b)) 3 4)" "(search [1 2 3] [2 3 4])" "(search [1 2 3] [2 3 4] [2 23])" "(clojure.set/intersection (set [[12 3 4] [2 3 4] [221 22 3] [21 3 4]]))" "(clojure.set/intersection [[12 3 4] [2 3 4] [221 22 3] [21 3 4]])" "(clojure.set/intersection '([12 3 4] [2 3 4] [221 22 3] [21 3 4]))" "(\#(set (filter %1 %2)) [1 2 3] [2 3 4])" "((\#(set (filter %1 %2))) [1 2 3] [2 3 4])" "((fn [a b] (set (filter a b))) [1 2 3] [4 5 6])" "\#(set (filter %1 %2))" "(\#(set (filter %1 %2)) [1 2 3] [2 3 4])" "(fn [a b] \#(set (filter a b)))" "((fn [a b] \#(set (filter a b))) [1 2 3] [4 5 6])" "(defn interseccion [a b] \#(set (filter a b)))" "(interseccion [1 2 3] [2 5 6])" "\#(set (filter %1 %2))" "\#(set (filter [1 2 3] [2 3 4]))" "\#(set (filter \#{1 2 3} \#{2 3 4}))" "(filter \#{1 2 3} \#{2 3 4})" "(search [1 2 3] [3 4 5])" "((fn [a] [c d] a (+ c d)) 3)" "((fn ([a] a) ([a b] (+ a b))))" "((fn ([a] a) ([a b] (+ a b))) 3)" "((fn ([a] a) ([a b] (+ a b))) 3 3)" "(search [1 2 3] [3 2 4])" "(search [1 2 3 4] [4 5 6] [4 12 12])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(take 1 [1 2 3])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search (range) (range 0 100 7/6) [10 23 31 42 72 182])" "asd" "(search (range) (range 0 100 7/6) [10 23 31 42 72 182])" "(range)" "(first (range))" "(filter (set (range)) (set [10 23]))" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])"]
eclipse.preferences.version=1
